1 (2,0) - Criar nova tabela HTL_SERVICO_QTDE. Devem ser criados os campos ID_HTL_SERVICO_QTDE como chave primária (NUMBER, atualizado automaticamente ou pela sequence SEQ_HTL_SERVICO_QTDE), DATA_SERVICO (DATE) e QTDE_SERVICO(NUMBER(5,0)). Além disso, você deve analisar o relacionamento com as demais tabelas e criar a(s) coluna(as) e chave(s) estrangeira(s) apropriada(s). O objetivo é armazenar a quantidade total de um determinado serviço para TODOS as reservas realizados em uma determinada DATA.
2 (2,0) - Crie um Stored Procedure para inserir registros na tabela HTL_SERVICO_QTDE considerando as reservas existentes com suas datas e serviços cadastrados. (Sugestão: Use INSERT com SELECT)
3 (2,0) - Implementar um Stored Procedure que receba o ID de um QUARTO e retorne 2 valores (parâmetros OUT) para o quarto informado: valor total de reservas (VALOR_CONTRATADO) com check out realizado e valor médio dos serviços realizados. 
4 (2,0) - 3 (2,0) - Implementar uma Stored Function que receba o ID de uma RESERVA e retorne o valor total dos serviços executados
5 (2,0) - Criar campo VALOR_SERVICOS (NUMBER(5,0)) na tabela HTL_RESERVA e utilizar a função da questão 4 para atualizá-la para todos as reservas.

CREATE TABLE HTL_SERVICO_QTDE (

    ID_HTL_SERVICO_QTDE INTEGER GENERATED BY DEFAULT AS IDENTITY,

    

    DATA_SERVICO DATE,  

    QTDE_SERVICO NUMBER(5,0),

    

    SERVICO_ID INTEGER NOT NULL,

    RESERVA_ID INTEGER NOT NULL,

    

    CONSTRAINT PK_HTL_RESERVA_SERVICO_TESTE PRIMARY KEY (ID_HTL_SERVICO_QTDE),

    

    CONSTRAINT FK_HTL_RS_SERVICO_TESTE FOREIGN KEY (SERVICO_ID)

        REFERENCES HTL_SERVICO (SERVICO_ID),

    CONSTRAINT FK_HTL_RS_RESERVA_TESTE FOREIGN KEY (RESERVA_ID)

        REFERENCES HTL_RESERVA (RESERVA_ID)

);

-- =============================================

-- 2

-- =============================================

create or replace PROCEDURE HTL_SP_INSERIR_REGISTRO(



    P_RESERVA_ID        IN INTEGER,

    P_SERVICO_ID        IN INTEGER,

    

    P_DATA_SERVICO      IN DATE,

    P_QTDE_SERVICO      IN NUMBER

)

AS

BEGIN

    INSERT INTO HTL_SERVICO_QTDE (

        RESERVA_ID, SERVICO_ID, DATA_SERVICO, QTDE_SERVICO

    )

    VALUES (

        P_RESERVA_ID, P_SERVICO_ID, P_DATA_SERVICO, P_QTDE_SERVICO 

    );

END;



-- =============================================

SELECT

    h.NOME AS HOSPEDE,

    s.NOME AS SERVICO,

    rs.VALOR,

    rs.CONCLUIDO_EM

FROM HTL_RESERVA_SERVICO rs

JOIN HTL_SERVICO s ON s.SERVICO_ID = rs.SERVICO_ID

JOIN HTL_RESERVA r ON r.RESERVA_ID = rs.RESERVA_ID

JOIN HTL_HOSPEDE h ON h.HOSPEDE_ID = r.HOSPEDE_ID

ORDER BY h.NOME, rs.CONCLUIDO_EM;

-- =============================================

-- 03

--=============================================

CREATE OR REPLACE PROCEDURE HTL_SP_PROVA_CHECKOUT(

    P_QUARTO_ID             IN NUMBER,

    

    P_VALOR_CONTRATADO      OUT NUMBER,

    P_VALOR_MEDIO_SERVICO   OUT NUMBER

)

AS

BEGIN

    SELECT SUM(VALOR_CONTRATADO)

    INTO P_VALOR_CONTRATADO

    FROM HTL_RESERVA

    WHERE QUARTO_ID = P_QUARTO_ID

    AND CHECK_OUT IS NOT NULL;



    SELECT AVG(res1.VALOR)

    INTO P_VALOR_MEDIO_SERVICO

    FROM HTL_RESERVA_SERVICO res1

    JOIN HTL_RESERVA res2 ON res1.RESERVA_ID = res2.RESERVA_ID

    WHERE res2.QUARTO_ID = P_QUARTO_ID

    AND CHECK_OUT IS NOT NULL;

    

    DBMS_OUTPUT.PUT_LINE('Valor total Reservas:' || P_VALOR_CONTRATADO);

    DBMS_OUTPUT.PUT_LINE('Valor média serviços:' || P_VALOR_MEDIO_SERVICO);

/*



SET SERVEROUTPUT ON;



DECLARE

    P_VALOR_CONTRATADO NUMBER;

    P_VALOR_MEDIO_SERVICO NUMBER;



BEGIN

    HTL_SP_PROVA_CHECKOUT(1, P_VALOR_CONTRATADO, P_VALOR_MEDIO_SERVICO);



    DBMS_OUTPUT.PUT_LINE(' TESTE 02:');

    DBMS_OUTPUT.PUT_LINE(' ======================================= ');

    DBMS_OUTPUT.PUT_LINE(' Valor total Reservas:' || P_VALOR_CONTRATADO);

    DBMS_OUTPUT.PUT_LINE(' Valor média serviços:' || P_VALOR_MEDIO_SERVICO);

    DBMS_OUTPUT.PUT_LINE(' ======================================= ');



END;

*/

END;



--=============================================

-- 4

--=============================================



create or replace FUNCTION HTL_SF_TOTAL_SERVICOS_RESERVA (

    p_reserva_id IN HTL_RESERVA.RESERVA_ID%TYPE

)

RETURN NUMBER

IS

    v_total NUMBER(10,2);

    v_reserva_existe INTEGER;

BEGIN

    -- 1. Verifica se a reserva existe

    SELECT COUNT(1) INTO v_reserva_existe

    FROM HTL_RESERVA

    WHERE RESERVA_ID = p_reserva_id;



    IF v_reserva_existe = 0 THEN

        RETURN 0; -- Reserva não existe

    END IF;



    -- 2. Calcula o total dos serviços associados à reserva

    SELECT NVL(SUM(VALOR), 0) INTO v_total

    FROM HTL_RESERVA_SERVICO

    WHERE RESERVA_ID = p_reserva_id;



    RETURN v_total;

END HTL_SF_TOTAL_SERVICOS_RESERVA;



--=============================================

-- 5

--=============================================



select * from HTL_RESERVA;



ALTER TABLE HTL_RESERVA

ADD VALOR_SERVICOS NUMBER(5,0) NULL;



select * from HTL_RESERVA;



DECLARE

    v_total     NUMBER(10,2)

BEGIN

    v_total := HTL_SF_TOTAL_SERVICOS_RESERVA(p_reserva_id => 1);

    

    INSERT INTO HTL_RESERVA(

        VALOR_SERVICOS

    )

    VALUES (

        v_total

    );

END;

--==================================================

DECLARE
    CURSOR c_reservas IS
        SELECT r.RESERVA_ID, h.NOME, q.IDENTIFICADOR
        FROM HTL_RESERVA r
        JOIN HTL_HOSPEDE h ON h.HOSPEDE_ID = r.HOSPEDE_ID
        JOIN HTL_QUARTO q ON q.QUARTO_ID = r.QUARTO_ID
        ORDER BY r.RESERVA_ID;
    v_total NUMBER(10,2);
BEGIN
    DBMS_OUTPUT.PUT_LINE('RELATÓRIO DE SERVIÇOS POR RESERVA');
    DBMS_OUTPUT.PUT_LINE('---------------------------------');
    DBMS_OUTPUT.PUT_LINE(RPAD('RESERVA_ID', 12) || RPAD('HÓSPEDE', 20) ||
                         RPAD('QUARTO', 10) || 'TOTAL SERVIÇOS');
    DBMS_OUTPUT.PUT_LINE('---------------------------------');
    FOR r_reserva IN c_reservas LOOP
        v_total := HTL_SF_TOTAL_SERVICOS_RESERVA(r_reserva.RESERVA_ID);
        DBMS_OUTPUT.PUT_LINE(
            RPAD(r_reserva.RESERVA_ID, 12) ||
            RPAD(r_reserva.NOME, 20) ||
            RPAD(r_reserva.IDENTIFICADOR, 10) ||
            TO_CHAR(v_total, 'FM9999990.00')
        );
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('---------------------------------');
END;


-======================================================

DECLARE
    CURSOR c_reservas IS
        SELECT r.RESERVA_ID, h.NOME, q.IDENTIFICADOR
        FROM HTL_RESERVA r
        JOIN HTL_HOSPEDE h ON h.HOSPEDE_ID = r.HOSPEDE_ID
        JOIN HTL_QUARTO q ON q.QUARTO_ID = r.QUARTO_ID
        ORDER BY r.RESERVA_ID;
    v_total NUMBER(10,2);
    
BEGIN
    FOR r_reserva IN c_reservas LOOP
        v_total := HTL_SF_TOTAL_SERVICOS_RESERVA(r_reserva.RESERVA_ID);
        INSERT INTO HTL_RESERVA(VALOR_SERVICOS)
        VALUES (v_total);
    END LOOP;
END;


Comentário do carinha: Comentário:
1 (2,0) -  A quantidade do serviço é para TODAS as reservas, então não faz sentido incluir o ID da reserva como chave estrangeira. (1.0)

2 (2,0) -  Deveriam ser inseridos TODOS os serviços nas datas gravadas )INSERT com SELECT) e não apenas um INSERT simples. (0.5)

3 (2,0) - OK. Procedure não deve imprimir dados na tela. (2.0)

4 (2,0) - COUNT(1) não tem sentido, deveria ser COUNT(*). (1.8)

5 (2,0) -  INSERT não pedido e sem os campos de chave estrangeira. Usado CURSOR (não passado em aula) e que consulta a mesma tabela que está sendo atualizada (pode gerar MUTATING, tema de aulas futuras!!). A solução era bem mais simples e foi passada em sala de aula. Bastava usar diretamente o comando UPDATE que gera um cursor implícito e a passar o ID da reserva.(0.0)

Exemplo:
UPDATE HTL_RESERVA R 

    SET VALOR_SERVICOS = HTL_SF_TOTAL_SERVICOS_RESERVA(R.RESERVA_ID);




